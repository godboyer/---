// vite.config.ts
import { defineConfig, loadEnv } from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/vite/dist/node/index.js";

// build/plugins/index.ts
import vue from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import progress from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/vite-plugin-progress/dist/index.mjs";

// build/plugins/html.ts
import { createHtmlPlugin } from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/vite-plugin-html/dist/index.mjs";

// build/plugins/unplugin.ts
import VueMacros from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unplugin-vue-macros/dist/vite.mjs";
import Icons from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unplugin-icons/dist/vite.mjs";
import IconsResolver from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unplugin-icons/dist/resolver.mjs";
import Components from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unplugin-vue-components/dist/vite.mjs";
import { NaiveUiResolver } from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unplugin-vue-components/dist/resolvers.mjs";
import { FileSystemIconLoader } from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unplugin-icons/dist/loaders.mjs";
import { createSvgIconsPlugin } from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/vite-plugin-svg-icons/dist/index.mjs";

// build/utils/index.ts
import path from "path";
function getRootPath() {
  return path.resolve(process.cwd());
}
function getSrcPath(srcName = "src") {
  const rootPath = getRootPath();
  return `${rootPath}/${srcName}`;
}

// build/plugins/unplugin.ts
function unplugin(viteEnv) {
  const { VITE_ICON_PREFFIX, VITE_ICON_LOCAL_PREFFIX } = viteEnv;
  const srcPath = getSrcPath();
  const localIconPath = `${srcPath}/assets/svg-icon`;
  const collectionName = VITE_ICON_LOCAL_PREFFIX.replace(`${VITE_ICON_PREFFIX}-`, "");
  return [
    VueMacros(),
    Icons({
      compiler: "vue3",
      customCollections: {
        [collectionName]: FileSystemIconLoader(localIconPath)
      },
      scale: 1,
      defaultClass: "inline-block"
    }),
    Components({
      dts: "src/typings/components.d.ts",
      types: [{ from: "vue-router", names: ["RouterLink", "RouterView"] }],
      resolvers: [
        NaiveUiResolver(),
        IconsResolver({ customCollections: [collectionName], componentPrefix: VITE_ICON_PREFFIX })
      ]
    }),
    createSvgIconsPlugin({
      iconDirs: [localIconPath],
      symbolId: `${VITE_ICON_LOCAL_PREFFIX}-[dir]-[name]`,
      inject: "body-last",
      customDomId: "__SVG_ICON_LOCAL__"
    })
  ];
}

// build/plugins/visualizer.ts
import { visualizer } from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";
var visualizer_default = visualizer({
  gzipSize: true,
  brotliSize: true,
  open: true
});

// build/plugins/compress.ts
import ViteCompression from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/vite-plugin-compression/dist/index.mjs";

// build/plugins/pwa.ts
import { VitePWA } from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/vite-plugin-pwa/dist/index.mjs";

// build/config/define.ts
import dayjs from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/dayjs/dayjs.min.js";
var PROJECT_BUILD_TIME = JSON.stringify(
  dayjs().format("YYYY-MM-DD HH:mm:ss")
);
var viteDefine = {
  PROJECT_BUILD_TIME
};

// .env-config.ts
var serviceEnv = {
  dev: {
    url: "http://127.0.0.1:3040/api",
    urlPattern: "http://127.0.0.1:3040/api",
    secondUrl: "http://127.0.0.1:3040/api",
    secondUrlPattern: "/second-url-pattern"
  },
  test: {
    url: "http://localhost:8080",
    urlPattern: "/url-pattern",
    secondUrl: "http://localhost:8081",
    secondUrlPattern: "/second-url-pattern"
  },
  prod: {
    url: "http://114.132.198.2:3020/api",
    urlPattern: "/url-pattern",
    secondUrl: "http://114.132.198.2:3020/api",
    secondUrlPattern: "/second-url-pattern"
  }
};
function getServiceEnvConfig(env) {
  const { VITE_SERVICE_ENV = "dev" } = env;
  const config = serviceEnv[VITE_SERVICE_ENV];
  return config;
}

// vite.config.ts
import vue2 from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import vueJsx2 from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/@vitejs/plugin-vue-jsx/dist/index.mjs";
import AutoImport from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unplugin-auto-import/dist/vite.js";
import Components2 from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unplugin-vue-components/dist/vite.mjs";
import DefineOptions from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unplugin-vue-define-options/dist/vite.mjs";
import {
  ElementPlusResolver,
  NaiveUiResolver as NaiveUiResolver2
} from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unplugin-vue-components/dist/resolvers.mjs";
import Unocss from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unocss/dist/vite.mjs";
import { presetUno, presetAttributify, presetIcons } from "file:///C:/Users/wc185/OneDrive%20-%20%E6%AD%A6%E6%B1%89%E5%B7%A5%E7%A8%8B%E5%A4%A7%E5%AD%A6%E9%82%AE%E7%94%B5%E4%B8%8E%E4%BF%A1%E6%81%AF%E5%B7%A5%E7%A8%8B%E5%AD%A6%E9%99%A2/%E6%A1%8C%E9%9D%A2/secondhand-home/node_modules/unocss/dist/index.mjs";
var vite_config_default = defineConfig((configEnv) => {
  const viteEnv = loadEnv(configEnv.mode, process.cwd());
  const rootPath = getRootPath();
  const srcPath = getSrcPath();
  const isOpenProxy = viteEnv.VITE_HTTP_PROXY === "Y";
  const envConfig = getServiceEnvConfig(viteEnv);
  return {
    plugins: [
      // ...setupVitePlugins(viteEnv),
      ...unplugin(viteEnv),
      vue2(),
      vueJsx2(),
      DefineOptions(),
      AutoImport({
        imports: [
          "vue",
          {
            "naive-ui": [
              "useDialog",
              "useMessage",
              "useNotification",
              "useLoadingBar"
            ]
          }
        ],
        resolvers: [ElementPlusResolver()]
      }),
      Components2({
        resolvers: [ElementPlusResolver(), NaiveUiResolver2()]
      }),
      Unocss({
        presets: [presetUno(), presetAttributify(), presetIcons()]
      })
    ],
    define: viteDefine,
    mode: "development",
    // 代码环境  开发和生产    production 生产环境
    // @ => src
    resolve: {
      alias: {
        "~": rootPath,
        "@": srcPath,
        "vue-i18n": "vue-i18n/dist/vue-i18n.cjs.js"
      }
    },
    base: "http://localhost:5173",
    server: {
      hmr: {
        host: "localhost"
      },
      host: "0.0.0.0",
      port: 5173,
      open: true,
      proxy: {}
    }
  };
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
